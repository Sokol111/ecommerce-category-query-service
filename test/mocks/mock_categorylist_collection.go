// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// NewMockCategoryCollection creates a new instance of MockCategoryCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryCollection {
	mock := &MockCategoryCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryCollection is an autogenerated mock type for the collection type
type MockCategoryCollection struct {
	mock.Mock
}

type MockCategoryCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryCollection) EXPECT() *MockCategoryCollection_Expecter {
	return &MockCategoryCollection_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockCategoryCollection
func (_mock *MockCategoryCollection) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (*mongo.Cursor, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) (*mongo.Cursor, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) *mongo.Cursor); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCategoryCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOptions
func (_e *MockCategoryCollection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *MockCategoryCollection_Find_Call {
	return &MockCategoryCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockCategoryCollection_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOptions)) *MockCategoryCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []*options.FindOptions
		var variadicArgs []*options.FindOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]*options.FindOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCategoryCollection_Find_Call) Return(cur *mongo.Cursor, err error) *MockCategoryCollection_Find_Call {
	_c.Call.Return(cur, err)
	return _c
}

func (_c *MockCategoryCollection_Find_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (*mongo.Cursor, error)) *MockCategoryCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockCategoryCollection
func (_mock *MockCategoryCollection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockCategoryCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *MockCategoryCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockCategoryCollection_UpdateOne_Call {
	return &MockCategoryCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockCategoryCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *MockCategoryCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		var arg3 []*options.UpdateOptions
		var variadicArgs []*options.UpdateOptions
		if len(args) > 3 {
			variadicArgs = args[3].([]*options.UpdateOptions)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCategoryCollection_UpdateOne_Call) Return(updateResult *mongo.UpdateResult, err error) *MockCategoryCollection_UpdateOne_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockCategoryCollection_UpdateOne_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockCategoryCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
