// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Sokol111/ecommerce-category-query-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryStore creates a new instance of MockCategoryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryStore {
	mock := &MockCategoryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryStore is an autogenerated mock type for the Store type
type MockCategoryStore struct {
	mock.Mock
}

type MockCategoryStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryStore) EXPECT() *MockCategoryStore_Expecter {
	return &MockCategoryStore_Expecter{mock: &_m.Mock}
}

// GetAllEnabled provides a mock function for the type MockCategoryStore
func (_mock *MockCategoryStore) GetAllEnabled(ctx context.Context) (*model.CategoryListViewDTO, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEnabled")
	}

	var r0 *model.CategoryListViewDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*model.CategoryListViewDTO, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *model.CategoryListViewDTO); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CategoryListViewDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryStore_GetAllEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEnabled'
type MockCategoryStore_GetAllEnabled_Call struct {
	*mock.Call
}

// GetAllEnabled is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryStore_Expecter) GetAllEnabled(ctx interface{}) *MockCategoryStore_GetAllEnabled_Call {
	return &MockCategoryStore_GetAllEnabled_Call{Call: _e.mock.On("GetAllEnabled", ctx)}
}

func (_c *MockCategoryStore_GetAllEnabled_Call) Run(run func(ctx context.Context)) *MockCategoryStore_GetAllEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryStore_GetAllEnabled_Call) Return(categoryListViewDTO *model.CategoryListViewDTO, err error) *MockCategoryStore_GetAllEnabled_Call {
	_c.Call.Return(categoryListViewDTO, err)
	return _c
}

func (_c *MockCategoryStore_GetAllEnabled_Call) RunAndReturn(run func(ctx context.Context) (*model.CategoryListViewDTO, error)) *MockCategoryStore_GetAllEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockCategoryStore
func (_mock *MockCategoryStore) Upsert(ctx context.Context, id string, name string, version int, enabled bool) error {
	ret := _mock.Called(ctx, id, name, version, enabled)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, bool) error); ok {
		r0 = returnFunc(ctx, id, name, version, enabled)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryStore_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockCategoryStore_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - version int
//   - enabled bool
func (_e *MockCategoryStore_Expecter) Upsert(ctx interface{}, id interface{}, name interface{}, version interface{}, enabled interface{}) *MockCategoryStore_Upsert_Call {
	return &MockCategoryStore_Upsert_Call{Call: _e.mock.On("Upsert", ctx, id, name, version, enabled)}
}

func (_c *MockCategoryStore_Upsert_Call) Run(run func(ctx context.Context, id string, name string, version int, enabled bool)) *MockCategoryStore_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockCategoryStore_Upsert_Call) Return(err error) *MockCategoryStore_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryStore_Upsert_Call) RunAndReturn(run func(ctx context.Context, id string, name string, version int, enabled bool) error) *MockCategoryStore_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
