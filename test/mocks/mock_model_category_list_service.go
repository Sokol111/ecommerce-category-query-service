// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Sokol111/ecommerce-category-query-service/pkg/model"
	"github.com/Sokol111/ecommerce-commons/pkg/event"
	"github.com/Sokol111/ecommerce-commons/pkg/event/payload"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryListService creates a new instance of MockCategoryListService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryListService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryListService {
	mock := &MockCategoryListService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryListService is an autogenerated mock type for the CategoryListService type
type MockCategoryListService struct {
	mock.Mock
}

type MockCategoryListService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryListService) EXPECT() *MockCategoryListService_Expecter {
	return &MockCategoryListService_Expecter{mock: &_m.Mock}
}

// GetActiveCategories provides a mock function for the type MockCategoryListService
func (_mock *MockCategoryListService) GetActiveCategories(ctx context.Context) (*model.CategoryListViewDTO, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveCategories")
	}

	var r0 *model.CategoryListViewDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*model.CategoryListViewDTO, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *model.CategoryListViewDTO); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CategoryListViewDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryListService_GetActiveCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCategories'
type MockCategoryListService_GetActiveCategories_Call struct {
	*mock.Call
}

// GetActiveCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryListService_Expecter) GetActiveCategories(ctx interface{}) *MockCategoryListService_GetActiveCategories_Call {
	return &MockCategoryListService_GetActiveCategories_Call{Call: _e.mock.On("GetActiveCategories", ctx)}
}

func (_c *MockCategoryListService_GetActiveCategories_Call) Run(run func(ctx context.Context)) *MockCategoryListService_GetActiveCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryListService_GetActiveCategories_Call) Return(categoryListViewDTO *model.CategoryListViewDTO, err error) *MockCategoryListService_GetActiveCategories_Call {
	_c.Call.Return(categoryListViewDTO, err)
	return _c
}

func (_c *MockCategoryListService_GetActiveCategories_Call) RunAndReturn(run func(ctx context.Context) (*model.CategoryListViewDTO, error)) *MockCategoryListService_GetActiveCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessCategoryCreatedEvent provides a mock function for the type MockCategoryListService
func (_mock *MockCategoryListService) ProcessCategoryCreatedEvent(ctx context.Context, e *event.Event[payload.CategoryCreated]) error {
	ret := _mock.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for ProcessCategoryCreatedEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *event.Event[payload.CategoryCreated]) error); ok {
		r0 = returnFunc(ctx, e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryListService_ProcessCategoryCreatedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessCategoryCreatedEvent'
type MockCategoryListService_ProcessCategoryCreatedEvent_Call struct {
	*mock.Call
}

// ProcessCategoryCreatedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e *event.Event[payload.CategoryCreated]
func (_e *MockCategoryListService_Expecter) ProcessCategoryCreatedEvent(ctx interface{}, e interface{}) *MockCategoryListService_ProcessCategoryCreatedEvent_Call {
	return &MockCategoryListService_ProcessCategoryCreatedEvent_Call{Call: _e.mock.On("ProcessCategoryCreatedEvent", ctx, e)}
}

func (_c *MockCategoryListService_ProcessCategoryCreatedEvent_Call) Run(run func(ctx context.Context, e *event.Event[payload.CategoryCreated])) *MockCategoryListService_ProcessCategoryCreatedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *event.Event[payload.CategoryCreated]
		if args[1] != nil {
			arg1 = args[1].(*event.Event[payload.CategoryCreated])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryListService_ProcessCategoryCreatedEvent_Call) Return(err error) *MockCategoryListService_ProcessCategoryCreatedEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryListService_ProcessCategoryCreatedEvent_Call) RunAndReturn(run func(ctx context.Context, e *event.Event[payload.CategoryCreated]) error) *MockCategoryListService_ProcessCategoryCreatedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessCategoryUpdatedEvent provides a mock function for the type MockCategoryListService
func (_mock *MockCategoryListService) ProcessCategoryUpdatedEvent(ctx context.Context, e *event.Event[payload.CategoryUpdated]) error {
	ret := _mock.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for ProcessCategoryUpdatedEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *event.Event[payload.CategoryUpdated]) error); ok {
		r0 = returnFunc(ctx, e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryListService_ProcessCategoryUpdatedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessCategoryUpdatedEvent'
type MockCategoryListService_ProcessCategoryUpdatedEvent_Call struct {
	*mock.Call
}

// ProcessCategoryUpdatedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e *event.Event[payload.CategoryUpdated]
func (_e *MockCategoryListService_Expecter) ProcessCategoryUpdatedEvent(ctx interface{}, e interface{}) *MockCategoryListService_ProcessCategoryUpdatedEvent_Call {
	return &MockCategoryListService_ProcessCategoryUpdatedEvent_Call{Call: _e.mock.On("ProcessCategoryUpdatedEvent", ctx, e)}
}

func (_c *MockCategoryListService_ProcessCategoryUpdatedEvent_Call) Run(run func(ctx context.Context, e *event.Event[payload.CategoryUpdated])) *MockCategoryListService_ProcessCategoryUpdatedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *event.Event[payload.CategoryUpdated]
		if args[1] != nil {
			arg1 = args[1].(*event.Event[payload.CategoryUpdated])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryListService_ProcessCategoryUpdatedEvent_Call) Return(err error) *MockCategoryListService_ProcessCategoryUpdatedEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryListService_ProcessCategoryUpdatedEvent_Call) RunAndReturn(run func(ctx context.Context, e *event.Event[payload.CategoryUpdated]) error) *MockCategoryListService_ProcessCategoryUpdatedEvent_Call {
	_c.Call.Return(run)
	return _c
}
